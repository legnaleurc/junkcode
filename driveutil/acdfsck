#! /usr/bin/env python3
# ex: et sw=4 ts=4 sts=4

import sys
import re
import subprocess
import json
import multiprocessing as mp
import os.path as op
import contextlib
import sqlite3


class FileError(Exception):

    def __init__(self, node_path):
        self.node_path = node_path


class MissingError(FileError):

    def __str__(self):
        return 'error[missing]: {0}'.format(self.node_path)


class MetadataError(FileError):

    def __str__(self):
        return 'error[metadata]: {0}'.format(self.node_path)


def main(args=None):
    if args is None:
        args = sys.argv

    file_path = args[1]

    pool = mp.Pool()
    for r in pool.imap_unordered(speed, walk_nodes(file_path)):
        print(r)
        sys.stdout.flush()

    return 0


def walk_nodes(file_path):
    with open(file_path, 'r') as fin:
        for line in fin:
            m = re.match(r'^([\d\w]+)  (.*)$', line)
            local_hash = m.group(1)
            path = m.group(2)
            yield (path, local_hash)


def speed(args):
    path, local_hash = args[0], args[1]

    try:
        node_id = get_node_id(path)
    except MissingError as e:
        return str(e)

    try:
        remote_hash = get_node_hash(path, node_id)
    except MetadataError as e:
        return str(e)

    if local_hash != remote_hash:
        return (
            'error[mismatch]:\n'
            '  path: {0}\n'
            '  expected: {1}\n'
            '  found: {2}'
        ).format(path, local_hash, remote_hash)

    return 'ok: {0}'.format(path)


def get_node_id(node_path):
    cmd = ['acdcli', 'resolve', '--', node_path]
    try:
        result = subprocess.check_output(cmd)
    except subprocess.CalledProcessError as e:
        raise MissingError(node_path)
    node_id = result.decode('utf-8').strip()
    return node_id


def get_node_hash(node_path, node_id):
    with open_cache() as cursor:
        cursor.execute('SELECT `md5` FROM `files` WHERE `id`=?;', (node_id,))
        row = cursor.fetchone()
        if not row:
            raise MetadataError(node_path)
        remote_hash = row['md5']
    return remote_hash


@contextlib.contextmanager
def open_cache():
    db_path = op.expanduser('~/.cache/acd_cli/nodes.db')
    with sqlite3.connect(db_path) as db:
        db.row_factory = sqlite3.Row
        with contextlib.closing(db.cursor()) as cursor:
            yield cursor


if __name__ == '__main__':
    exit_code = main()
    sys.exit(exit_code)
