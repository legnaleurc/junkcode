#! /usr/bin/env python3


import contextlib
import hashlib
import os
import os.path as op
import queue
import signal
import sys
import threading

from acdcli.api import client as ACD
from acdcli.cache import db as DB
from acdcli.utils import hashing


class Cache(object):

    def __init__(self, cache_folder):
        self._context = Context(cache_folder)
        self._download_thread = None

    def stop(self, signum, frame):
        self._context.end_queue()
        if self._download_thread:
            self._download_thread.join()
        print()
        sys.exit(0)

    def download(self, node_id):
        node = self._context.get_node(node_id)
        if not node:
            return

        self._context.push_queue(node)

        if not self._download_thread:
            self._download_thread = DownloadThread(self._context)
            self._download_thread.start()


class DownloadThread(threading.Thread):

    def __init__(self, context):
        super(DownloadThread, self).__init__()

        self._context = context

    # Override
    def run(self):
        while True:
            with self._context.pop_queue() as node:
                if node is None:
                    # special value, need stop
                    break
                self._download(node, self._context.root_folder)

    def _download(self, node, local_path):
        local_path = local_path if local_path else ''
        full_path = op.join(local_path, node.name)

        if not node.is_available:
            return False

        if node.is_folder:
            ok = self._download_folder(node, full_path)
        else:
            ok = self._download_file(node, local_path, full_path)

        return ok

    def _download_folder(self, node, full_path):
        try:
            os.makedirs(full_path, exist_ok=True)
        except OSError:
            print('mkdir failed: ' + full_path)
            return False

        children = self._context.get_children(node)
        for child in children:
            ok = self._download(child, full_path)
            if not ok:
                return False

        return True

    def _download_file(self, node, local_path, full_path):
        if op.isfile(full_path):
            print('checking existed: ' + full_path)
            local = md5sum(full_path)
            remote = node.md5
            if local == remote:
                print('skip same file: ' + full_path)
                return True
            print('md5 mismatch: ' + full_path)
            os.remove(full_path)

        self._context.reserve_space(node)

        # retry until succeed
        while True:
            try:
                print('downloading: ' + full_path)
                local_hash = self._context.download_node(node, local_path)
                print('downloaded: ' + full_path)
            except RequestError as e:
                print('download failed: ' + str(e))
            except OSError as e:
                if e.errno == 36:
                    print('warning: file name too long')
                    return True
                raise
            else:
                remote_hash = node.md5
                if local_hash != remote_hash:
                    print('md5 mismatch: ' + full_path)
                    os.remove(full_path)
                else:
                    break

        return True


# used by both threads
class Context(object):

    def __init__(self, cache_folder):
        self._cache_folder = cache_folder
        auth_folder = op.expanduser('~/.cache/acd_cli')
        self._acd_client = ACD.ACDClient(auth_folder)
        self._acd_db = DB.NodeCache(auth_folder)
        self._download_queue = queue.Queue()

    # thread safe
    @property
    def root_folder(self):
        return self._cache_folder

    # main thread
    def end_queue(self):
        self._download_queue.put(None)

    # main thread
    def push_queue(self, node):
        self._download_queue.put(node)

    # worker thread
    @contextlib.contextmanager
    def pop_queue(self):
        try:
            yield self._download_queue.get()
        finally:
            self._download_queue.task_done()

    # main thread
    def get_node(self, node_id):
        return self._acd_db.get_node(node_id)

    # worker thread
    def get_children(self, node):
        folders, files = self._acd_db.list_children(node.id)
        children = folders + files
        return children

    # worker thread
    def download_node(self, node, local_path):
        hasher = hashing.IncrementalHasher()
        self._acd_client.download_file(node.id, node.name, local_path, write_callbacks=[
            hasher.update,
        ])
        return hasher.get_result()

    # worker thread
    def reserve_space(self, node):
        entries = self._get_cache_entries()

        while True:
            free_space = self._get_free_space()
            required_space = self._get_node_size(node)
            print('free space: {0} GB, required: {1} GB'.format(free_space / 1024 / 1024 / 1024, required_space / 1024 / 1024 / 1024))
            if free_space > required_space:
                break

            full_path, mtime = entries.pop(0)
            if op.isdir(full_path):
                shutil.rmtree(full_path)
            else:
                os.remove(full_path)
            print('recycled: ' + full_path)

    # worker thread
    def _get_cache_entries(self):
        entries = os.listdir(self._cache_folder)
        entries = (op.join(self._cache_folder, _) for _ in entries)
        entries = ((_, os.stat(_).st_mtime) for _ in entries)
        entries = sorted(entries, key=lambda _: _[1])
        return entries

    # worker thread
    # in bytes
    def _get_free_space(self):
        s = os.statvfs(self._cache_folder)
        s = s.f_frsize * s.f_bavail
        return s

    # worker thread
    # in bytes
    def _get_node_size(self, node):
        if not node.is_available:
            return 0

        if not node.is_folder:
            return node.size

        children = self.get_children(node)
        children = (self._get_node_size(_) for _ in children)
        return sum(children)


def read_user_input():
    line = input()
    return line.rstrip()


def md5sum(full_path):
    hasher = hashlib.md5()
    with open(full_path, 'rb') as fin:
        while True:
            chunk = fin.read(65536)
            if not chunk:
                break
            hasher.update(chunk)
    return hasher.hexdigest()


def main(args=None):
    if args is None:
        args = sys.argv

    cache = Cache(args[1])

    signal.signal(signal.SIGINT, cache.stop)

    print('ready')
    while True:
        id_ = read_user_input()
        cache.download(id_)

    return 0

if __name__ == '__main__':
    exit_code = main()
    sys.exit(exit_code)
